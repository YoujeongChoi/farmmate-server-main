"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedFormDataBodyProgrammer = void 0;
var typescript_1 = __importDefault(require("typescript"));
var LiteralFactory_1 = require("typia/lib/factories/LiteralFactory");
var MetadataCollection_1 = require("typia/lib/factories/MetadataCollection");
var MetadataFactory_1 = require("typia/lib/factories/MetadataFactory");
var HttpAssertFormDataProgrammer_1 = require("typia/lib/programmers/http/HttpAssertFormDataProgrammer");
var HttpFormDataProgrammer_1 = require("typia/lib/programmers/http/HttpFormDataProgrammer");
var HttpIsFormDataProgrammer_1 = require("typia/lib/programmers/http/HttpIsFormDataProgrammer");
var HttpValidateFormDataProgrammer_1 = require("typia/lib/programmers/http/HttpValidateFormDataProgrammer");
var TransformerError_1 = require("typia/lib/transformers/TransformerError");
var TypedFormDataBodyProgrammer;
(function (TypedFormDataBodyProgrammer) {
    TypedFormDataBodyProgrammer.generate = function (project) {
        return function (modulo) {
            return function (type) {
                // VALIDATE TYPE
                var collection = new MetadataCollection_1.MetadataCollection();
                var result = MetadataFactory_1.MetadataFactory.analyze(project.checker, project.context)({
                    escape: false,
                    constant: true,
                    absorb: true,
                    validate: HttpFormDataProgrammer_1.HttpFormDataProgrammer.validate,
                })(collection)(type);
                if (result.success === false)
                    throw TransformerError_1.TransformerError.from("nestia.core.TypedFormData.Body")(result.errors);
                var files = result.data.objects[0].properties
                    .filter(function (p) {
                    return isFile(p.value) ||
                        p.value.arrays.some(function (a) { return isFile(a.type.value); });
                })
                    .map(function (p) { return ({
                    name: p.key.constants[0].values[0],
                    limit: !!p.value.natives.length ? 1 : null,
                }); });
                // GENERATE VALIDATION PLAN
                var parameter = function (key) {
                    return function (programmer) {
                        return typescript_1.default.factory.createObjectLiteralExpression([
                            typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("files"), LiteralFactory_1.LiteralFactory.generate(files)),
                            typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("validator"), typescript_1.default.factory.createObjectLiteralExpression([
                                typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier("type"), typescript_1.default.factory.createStringLiteral(key)),
                                typescript_1.default.factory.createPropertyAssignment(typescript_1.default.factory.createIdentifier(key), programmer(__assign(__assign({}, project), { options: {
                                        numeric: false,
                                        finite: false,
                                        functional: false,
                                    } }))(modulo)(type)),
                            ], true)),
                        ], true);
                    };
                };
                // RETURNS
                var category = project.options.validate;
                if (category === "is" || category === "equals")
                    return parameter("is")(HttpIsFormDataProgrammer_1.HttpIsFormDataProgrammer.write);
                else if (category === "validate" ||
                    category === "validateEquals" ||
                    category === "validateClone" ||
                    category === "validatePrune")
                    return parameter("validate")(HttpValidateFormDataProgrammer_1.HttpValidateFormDataProgrammer.write);
                return parameter("assert")(HttpAssertFormDataProgrammer_1.HttpAssertFormDataProgrammer.write);
            };
        };
    };
})(TypedFormDataBodyProgrammer || (exports.TypedFormDataBodyProgrammer = TypedFormDataBodyProgrammer = {}));
var isFile = function (meta) {
    return meta.natives.some(function (n) { return n === "File" || n === "Blob"; });
};
//# sourceMappingURL=TypedFormDataBodyProgrammer.js.map