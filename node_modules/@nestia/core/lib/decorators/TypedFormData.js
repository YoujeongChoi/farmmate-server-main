"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypedFormData = void 0;
var common_1 = require("@nestjs/common");
var multer_1 = __importDefault(require("multer"));
var typia_1 = __importDefault(require("typia"));
var Singleton_1 = require("../utils/Singleton");
var validate_request_form_data_1 = require("./internal/validate_request_form_data");
/**
 * Type safe multipart/form-data decorator.
 *
 * `TypedFormData.Body()` is a request body decorator function for the
 * `multipart/form-data` content type. It automatically casts property type
 * following its DTO definition, and performs the type validation too.
 *
 * Also, `TypedFormData.Body()` is much easier and type safer than `@nest.UploadFile()`.
 * If you're considering the [SDK library](https://nestia.io/docs/sdk/sdk) generation,
 * only `TypedFormData.Body()` can do it. Therefore, I recommend you to use
 * `TypedFormData.Body()` instead of the `@nest.UploadFile()` function.
 *
 * For reference, target type `T` must follow such restriction. Of course, if actual
 * form-data values are different with their promised type `T`,
 * `BadRequestException` error (status code: 400) would be thrown.
 *
 * 1. Type `T` must be an object type
 * 2. Do not allow dynamic property
 * 3. Only `boolean`, `bigint`, `number`, `string`, `Blob`, `File` or their array types are allowed
 * 4. By the way, union type never be not allowed
 *
 * By the way, if you're using `fastify`, you have to setup `@fastify/multipart`
 * and configure like below when composing the NestJS application. If you don't do
 * that, `@TypedFormData.Body()` will not work properly, and throw 500 internal
 * server error when `Blob` or `File` type being utilized.
 *
 * ```typescript
 * import multipart from "fastify-multipart";
 * import { NestFactory } from "@nestjs/core";
 * import {
 *   FastifyAdapter,
 *   NestFastifyApplication
 * } from "@nestjs/platform-fastify";
 *
 * export async function main() {
 *   const app = await NestFactory.create<NestFastifyApplication>(
 *     AppModule,
 *     new FastifyAdapter(),
 *   );
 *   app.register(multipart);
 *   await app.listen(3000);
 * }
 * ```
 *
 * @todo Change to ReadableStream through configuring storage engine of multer
 * @author Jeongho Nam - https://github.com/samchon
 */
var TypedFormData;
(function (TypedFormData) {
    /**
     * Request body decorator.
     *
     * Request body decorator for the `multipart/form-data` type.
     *
     * Much easier and type safer than `@nest.UploadFile()` decorator.
     *
     * @param props Automatically filled by transformer
     */
    function Body(props) {
        var checker = (0, validate_request_form_data_1.validate_request_form_data)(props);
        var predicator = function (type) {
            return new Singleton_1.Singleton(function () {
                return type === "express" ? decodeExpress(props) : decodeFastify(props);
            });
        };
        return (0, common_1.createParamDecorator)(function TypedFormDataBody(_unknown, context) {
            return __awaiter(this, void 0, void 0, function () {
                var http, request, decoder, data, output;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            http = context.switchToHttp();
                            request = http.getRequest();
                            if (isMultipartFormData(request.headers["content-type"]) === false)
                                throw new common_1.BadRequestException("Request body type is not \"multipart/form-data\".");
                            decoder = isExpressRequest(request)
                                ? predicator("express").get()
                                : predicator("fastify").get();
                            return [4 /*yield*/, decoder({
                                    request: request,
                                    response: http.getResponse(),
                                })];
                        case 1:
                            data = _a.sent();
                            output = checker(data);
                            if (output instanceof Error)
                                throw output;
                            return [2 /*return*/, output];
                    }
                });
            });
        })();
    }
    TypedFormData.Body = Body;
    Object.assign(Body, typia_1.default.http.assertFormData);
    Object.assign(Body, typia_1.default.http.isFormData);
    Object.assign(Body, typia_1.default.http.validateFormData);
})(TypedFormData || (exports.TypedFormData = TypedFormData = {}));
/**
 * @internal
 */
var decodeExpress = function (props) {
    var upload = multerApplication.get().fields(props.files.map(function (file) { return (__assign({ name: file.name }, (file.limit === 1 ? { maxCount: 1 } : {}))); }));
    var interceptor = function (request, response) {
        return new Promise(function (resolve, reject) {
            return upload(request, response, function (error) {
                if (error)
                    reject(error);
                else
                    resolve();
            });
        });
    };
    return function (socket) { return __awaiter(void 0, void 0, void 0, function () {
        var data, _a, _b, _c, key, value, _d, _e, elem;
        var e_1, _f, e_2, _g;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0: return [4 /*yield*/, interceptor(socket.request, socket.response)];
                case 1:
                    _h.sent();
                    data = new FormData();
                    try {
                        for (_a = __values(Object.entries(socket.request.body)), _b = _a.next(); !_b.done; _b = _a.next()) {
                            _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                            try {
                                for (_d = (e_2 = void 0, __values(String(value).split(","))), _e = _d.next(); !_e.done; _e = _d.next()) {
                                    elem = _e.value;
                                    data.append(key, elem);
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_e && !_e.done && (_g = _d.return)) _g.call(_d);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_f = _a.return)) _f.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (socket.request.files)
                        parseFiles(data)(socket.request.files);
                    return [2 /*return*/, data];
            }
        });
    }); };
};
/**
 * @internal
 */
var decodeFastify = function (_props) {
    return function (socket) { return __awaiter(void 0, void 0, void 0, function () {
        var data, _a, _b, _c, key, value, _d, _e, elem, _f, _g, _h, file, _j, _k, _l, _m, e_3_1;
        var e_4, _o, e_5, _p;
        var _q, e_3, _r, _s;
        var _t;
        return __generator(this, function (_u) {
            switch (_u.label) {
                case 0:
                    if (socket.request.files === undefined ||
                        typeof socket.request.files !== "function")
                        throw new common_1.InternalServerErrorException("Have not configured the `fastify-multipart` plugin yet. Inquiry to the backend developer.");
                    data = new FormData();
                    try {
                        for (_a = __values(Object.entries((_t = socket.request.body) !== null && _t !== void 0 ? _t : {})), _b = _a.next(); !_b.done; _b = _a.next()) {
                            _c = __read(_b.value, 2), key = _c[0], value = _c[1];
                            try {
                                for (_d = (e_5 = void 0, __values(String(value).split(","))), _e = _d.next(); !_e.done; _e = _d.next()) {
                                    elem = _e.value;
                                    data.append(key, elem);
                                }
                            }
                            catch (e_5_1) { e_5 = { error: e_5_1 }; }
                            finally {
                                try {
                                    if (_e && !_e.done && (_p = _d.return)) _p.call(_d);
                                }
                                finally { if (e_5) throw e_5.error; }
                            }
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_o = _a.return)) _o.call(_a);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    _u.label = 1;
                case 1:
                    _u.trys.push([1, 7, 8, 13]);
                    _f = true, _g = __asyncValues(socket.request.files());
                    _u.label = 2;
                case 2: return [4 /*yield*/, _g.next()];
                case 3:
                    if (!(_h = _u.sent(), _q = _h.done, !_q)) return [3 /*break*/, 6];
                    _s = _h.value;
                    _f = false;
                    file = _s;
                    _k = (_j = data).append;
                    _l = [file.fieldname];
                    _m = File.bind;
                    return [4 /*yield*/, file.toBuffer()];
                case 4:
                    _k.apply(_j, _l.concat([new (_m.apply(File, [void 0, [_u.sent()], file.filename, {
                                type: file.mimetype,
                            }]))()]));
                    _u.label = 5;
                case 5:
                    _f = true;
                    return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 13];
                case 7:
                    e_3_1 = _u.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 13];
                case 8:
                    _u.trys.push([8, , 11, 12]);
                    if (!(!_f && !_q && (_r = _g.return))) return [3 /*break*/, 10];
                    return [4 /*yield*/, _r.call(_g)];
                case 9:
                    _u.sent();
                    _u.label = 10;
                case 10: return [3 /*break*/, 12];
                case 11:
                    if (e_3) throw e_3.error;
                    return [7 /*endfinally*/];
                case 12: return [7 /*endfinally*/];
                case 13: return [2 /*return*/, data];
            }
        });
    }); };
};
/**
 * @internal
 */
var parseFiles = function (data) {
    return function (files) {
        var e_6, _a, e_7, _b, e_8, _c;
        if (Array.isArray(files))
            try {
                for (var files_1 = __values(files), files_1_1 = files_1.next(); !files_1_1.done; files_1_1 = files_1.next()) {
                    var file = files_1_1.value;
                    data.append(file.fieldname, new File([file.buffer], file.originalname, {
                        type: file.mimetype,
                    }));
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (files_1_1 && !files_1_1.done && (_a = files_1.return)) _a.call(files_1);
                }
                finally { if (e_6) throw e_6.error; }
            }
        else
            try {
                for (var _d = __values(Object.entries(files)), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var _f = __read(_e.value, 2), key = _f[0], value = _f[1];
                    try {
                        for (var value_1 = (e_8 = void 0, __values(value)), value_1_1 = value_1.next(); !value_1_1.done; value_1_1 = value_1.next()) {
                            var file = value_1_1.value;
                            data.append(key, new File([file.buffer], file.originalname, {
                                type: file.mimetype,
                            }));
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (value_1_1 && !value_1_1.done && (_c = value_1.return)) _c.call(value_1);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
                }
                finally { if (e_7) throw e_7.error; }
            }
    };
};
/**
 * @internal
 */
var isMultipartFormData = function (text) {
    return text !== undefined &&
        text
            .split(";")
            .map(function (str) { return str.trim(); })
            .some(function (str) { return str === "multipart/form-data"; });
};
/**
 * @internal
 */
var isExpressRequest = function (request) { return request.app !== undefined; };
/**
 * @internal
 */
var multerApplication = new Singleton_1.Singleton(function () { return (0, multer_1.default)(); });
//# sourceMappingURL=TypedFormData.js.map