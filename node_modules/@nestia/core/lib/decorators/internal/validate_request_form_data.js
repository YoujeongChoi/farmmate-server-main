"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate_request_form_data = void 0;
var common_1 = require("@nestjs/common");
var typia_1 = __importDefault(require("typia"));
var NoTransformConfigureError_1 = require("./NoTransformConfigureError");
/**
 * @internal
 */
var validate_request_form_data = function (props) {
    if (!props)
        return function () { return (0, NoTransformConfigureError_1.NoTransformConfigureError)("TypedFormData.Bpdu"); };
    else if (props.validator.type === "assert")
        return assert(props.validator.assert);
    else if (props.validator.type === "is")
        return is(props.validator.is);
    else if (props.validator.type === "validate")
        return validate(props.validator.validate);
    return function () {
        return new Error("Error on nestia.core.TypedFormData.Body(): invalid typed validator.");
    };
};
exports.validate_request_form_data = validate_request_form_data;
/**
 * @internal
 */
var assert = function (closure) {
    return function (input) {
        try {
            return closure(input);
        }
        catch (exp) {
            if ((function (input) {
                var $io0 = function (input) { return "string" === typeof input.method && (undefined === input.path || "string" === typeof input.path) && "string" === typeof input.expected && true && "string" === typeof input.name && "string" === typeof input.message && (undefined === input.stack || "string" === typeof input.stack); };
                return "object" === typeof input && null !== input && $io0(input);
            })(exp)) {
                return new common_1.BadRequestException({
                    path: exp.path,
                    reason: exp.message,
                    expected: exp.expected,
                    value: exp.value,
                    message: MESSAGE,
                });
            }
            throw exp;
        }
    };
};
/**
 * @internal
 */
var is = function (closure) {
    return function (input) {
        var result = closure(input);
        return result !== null ? result : new common_1.BadRequestException(MESSAGE);
    };
};
/**
 * @internal
 */
var validate = function (closure) {
    return function (input) {
        var result = closure(input);
        return result.success
            ? result.data
            : new common_1.BadRequestException({
                errors: result.errors,
                message: MESSAGE,
            });
    };
};
/**
 * @internal
 */
var MESSAGE = "Request multipart data is not following the promised type.";
//# sourceMappingURL=validate_request_form_data.js.map