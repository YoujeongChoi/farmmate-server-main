"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkRouteProgrammer = void 0;
const FilePrinter_1 = require("./FilePrinter");
const SdkFunctionProgrammer_1 = require("./SdkFunctionProgrammer");
const SdkNamespaceProgrammer_1 = require("./SdkNamespaceProgrammer");
var SdkRouteProgrammer;
(function (SdkRouteProgrammer) {
    SdkRouteProgrammer.generate = (checker) => (config) => (importer) => (route) => {
        const props = {
            headers: route.parameters.find((p) => p.category === "headers" && p.field === undefined),
            query: route.parameters.find((p) => p.category === "query" && p.field === undefined),
            input: route.parameters.find((p) => p.category === "body"),
        };
        return [
            FilePrinter_1.FilePrinter.description(SdkFunctionProgrammer_1.SdkFunctionProgrammer.write(config)(importer)(route, props), describe(route)),
            SdkNamespaceProgrammer_1.SdkNamespaceProgrammer.write(checker)(config)(importer)(route, props),
        ];
    };
    const describe = (route) => {
        var _a;
        // MAIN DESCRIPTION
        const comments = route.description
            ? route.description.split("\n")
            : [];
        // COMMENT TAGS
        const tags = route.jsDocTags.filter((tag) => tag.name !== "param" ||
            route.parameters
                .filter((p) => p.category !== "headers")
                .some((p) => { var _a, _b; return p.name === ((_b = (_a = tag.text) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.text); }));
        if (tags.length !== 0) {
            const content = tags.map((t) => {
                var _a;
                return ((_a = t.text) === null || _a === void 0 ? void 0 : _a.length)
                    ? `@${t.name} ${t.text.map((e) => e.text).join("")}`
                    : `@${t.name}`;
            });
            comments.push("", ...new Set(content));
        }
        // EXCEPTIONS
        for (const [key, value] of Object.entries(route.exceptions)) {
            if (comments.some((str) => str.startsWith(`@throw ${key}`) || str.startsWith(`@throws ${key}`)))
                continue;
            comments.push(((_a = value.description) === null || _a === void 0 ? void 0 : _a.length)
                ? `@throws ${key} ${value.description.split("\n")[0]}`
                : `@throws ${key}`);
        }
        // POSTFIX
        if (!!comments.length)
            comments.push("");
        comments.push(`@controller ${route.target.class.name}.${route.target.function.name}`, `@path ${route.method} ${route.path}`, `@nestia Generated by Nestia - https://github.com/samchon/nestia`);
        return comments.join("\n");
    };
})(SdkRouteProgrammer || (exports.SdkRouteProgrammer = SdkRouteProgrammer = {}));
//# sourceMappingURL=SdkRouteProgrammer.js.map