"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkNamespaceProgrammer = void 0;
const typescript_1 = __importDefault(require("typescript"));
const typia_1 = __importDefault(require("typia"));
const ExpressionFactory_1 = require("typia/lib/factories/ExpressionFactory");
const IdentifierFactory_1 = require("typia/lib/factories/IdentifierFactory");
const LiteralFactory_1 = require("typia/lib/factories/LiteralFactory");
const TypeFactory_1 = require("typia/lib/factories/TypeFactory");
const Escaper_1 = require("typia/lib/utils/Escaper");
const FilePrinter_1 = require("./FilePrinter");
const SdkAliasCollection_1 = require("./SdkAliasCollection");
const SdkImportWizard_1 = require("./SdkImportWizard");
const SdkSimulationProgrammer_1 = require("./SdkSimulationProgrammer");
const SdkTypeProgrammer_1 = require("./SdkTypeProgrammer");
var SdkNamespaceProgrammer;
(function (SdkNamespaceProgrammer) {
    SdkNamespaceProgrammer.write = (checker) => (config) => (importer) => (route, props) => {
        const types = write_types(checker)(config)(importer)(route, props);
        return typescript_1.default.factory.createModuleDeclaration([typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.default.factory.createIdentifier(route.name), typescript_1.default.factory.createModuleBlock([
            ...types,
            ...(types.length ? [FilePrinter_1.FilePrinter.enter()] : []),
            write_metadata(importer)(route, props),
            FilePrinter_1.FilePrinter.enter(),
            write_path(config)(importer)(route, props),
            ...(config.simulate
                ? [
                    SdkSimulationProgrammer_1.SdkSimulationProgrammer.random(checker)(config)(importer)(route),
                    SdkSimulationProgrammer_1.SdkSimulationProgrammer.simulate(config)(importer)(route, props),
                ]
                : []),
            ...(config.json && (input => {
                const $io0 = input => true === input.custom && "body" === input.category && "number" === typeof input.index && "string" === typeof input.name && (undefined === input.field || "string" === typeof input.field) && "boolean" === typeof input.encrypted && ("application/json" === input.contentType || "text/plain" === input.contentType || "application/x-www-form-urlencoded" === input.contentType || "multipart/form-data" === input.contentType);
                return "object" === typeof input && null !== input && $io0(input);
            })(props.input) &&
                (props.input.contentType === "application/json" ||
                    props.input.encrypted === true)
                ? [write_stringify(config)(importer)]
                : []),
        ]), typescript_1.default.NodeFlags.Namespace);
    };
    const write_types = (checker) => (config) => (importer) => (route, props) => {
        const array = [];
        const declare = (name, type) => array.push(typescript_1.default.factory.createTypeAliasDeclaration([typescript_1.default.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], name, undefined, type));
        if (props.headers !== undefined)
            declare("Headers", SdkAliasCollection_1.SdkAliasCollection.headers(config)(importer)(props.headers));
        if (props.query !== undefined)
            declare("Query", SdkAliasCollection_1.SdkAliasCollection.query(config)(importer)(props.query));
        if (props.input !== undefined)
            declare("Input", SdkAliasCollection_1.SdkAliasCollection.input(config)(importer)(props.input));
        if (config.propagate === true || route.output.typeName !== "void")
            declare("Output", SdkAliasCollection_1.SdkAliasCollection.output(checker)(config)(importer)(route));
        return array;
    };
    const write_metadata = (importer) => (route, props) => constant("METADATA")(typescript_1.default.factory.createAsExpression(typescript_1.default.factory.createObjectLiteralExpression([
        typescript_1.default.factory.createPropertyAssignment("method", typescript_1.default.factory.createStringLiteral(route.method)),
        typescript_1.default.factory.createPropertyAssignment("path", typescript_1.default.factory.createStringLiteral(route.path)),
        typescript_1.default.factory.createPropertyAssignment("request", props.input
            ? LiteralFactory_1.LiteralFactory.generate((input => {
                const $io0 = input => true === input.custom && "body" === input.category && "number" === typeof input.index && "string" === typeof input.name && (undefined === input.field || "string" === typeof input.field) && "boolean" === typeof input.encrypted && ("application/json" === input.contentType || "text/plain" === input.contentType || "application/x-www-form-urlencoded" === input.contentType || "multipart/form-data" === input.contentType);
                return "object" === typeof input && null !== input && $io0(input);
            })(props.input) ? {
                type: props.input.contentType,
                encrypted: !!props.input.encrypted,
            }
                : {
                    type: "application/json",
                    encrypted: false,
                })
            : typescript_1.default.factory.createNull()),
        typescript_1.default.factory.createPropertyAssignment("response", route.method !== "HEAD"
            ? LiteralFactory_1.LiteralFactory.generate({
                type: route.output.contentType,
                encrypted: !!route.encrypted,
            })
            : typescript_1.default.factory.createNull()),
        typescript_1.default.factory.createPropertyAssignment("status", route.status !== undefined
            ? ExpressionFactory_1.ExpressionFactory.number(route.status)
            : typescript_1.default.factory.createNull()),
        ...(route.output.contentType ===
            "application/x-www-form-urlencoded"
            ? [
                typescript_1.default.factory.createPropertyAssignment("parseQuery", typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier(`${SdkImportWizard_1.SdkImportWizard.typia(importer)}.http.createAssertQuery`), [
                    typescript_1.default.factory.createTypeReferenceNode(route.output.typeName),
                ], undefined)),
            ]
            : []),
    ], true), typescript_1.default.factory.createTypeReferenceNode(typescript_1.default.factory.createIdentifier("const"))));
    const write_path = (config) => (importer) => (route, props) => {
        const g = {
            total: [
                ...route.parameters.filter((param) => param.category === "param" || param.category === "query"),
            ],
            query: route.parameters.filter((param) => param.category === "query" && param.field !== undefined),
            path: route.parameters.filter((param) => param.category === "param"),
        };
        const out = (body) => constant("path")(typescript_1.default.factory.createArrowFunction([], [], g.total.map((p) => IdentifierFactory_1.IdentifierFactory.parameter(p.name, p === props.query
            ? typescript_1.default.factory.createTypeReferenceNode(`${route.name}.Query`)
            : getType(config)(importer)(p))), undefined, undefined, body));
        if (g.total.length === 0)
            return out(typescript_1.default.factory.createStringLiteral(route.path));
        const template = () => {
            const splitted = route.path.split(":");
            if (splitted.length === 1)
                return typescript_1.default.factory.createStringLiteral(route.path);
            return typescript_1.default.factory.createTemplateExpression(typescript_1.default.factory.createTemplateHead(splitted[0]), splitted.slice(1).map((s, i, arr) => {
                const name = s.split("/")[0];
                return typescript_1.default.factory.createTemplateSpan(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("encodeURIComponent"), undefined, [
                    typescript_1.default.factory.createBinaryExpression(typescript_1.default.factory.createIdentifier(g.path.find((p) => p.field === name).name), typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.QuestionQuestionToken), typescript_1.default.factory.createStringLiteral("null")),
                ]), (i !== arr.length - 1
                    ? typescript_1.default.factory.createTemplateMiddle
                    : typescript_1.default.factory.createTemplateTail)(s.substring(name.length)));
            }));
        };
        if (props.query === undefined && g.query.length === 0)
            return out(template());
        const block = (expr) => {
            const computeName = (str) => g.total
                .filter((p) => p.category !== "headers")
                .find((p) => p.name === str) !== undefined
                ? computeName("_" + str)
                : str;
            const variables = computeName("variables");
            return typescript_1.default.factory.createBlock([
                local(variables)("URLSearchParams")(typescript_1.default.factory.createNewExpression(typescript_1.default.factory.createIdentifier("URLSearchParams"), [], [])),
                typescript_1.default.factory.createForOfStatement(undefined, typescript_1.default.factory.createVariableDeclarationList([
                    typescript_1.default.factory.createVariableDeclaration(typescript_1.default.factory.createArrayBindingPattern([
                        typescript_1.default.factory.createBindingElement(undefined, undefined, typescript_1.default.factory.createIdentifier("key"), undefined),
                        typescript_1.default.factory.createBindingElement(undefined, undefined, typescript_1.default.factory.createIdentifier("value"), undefined),
                    ]), undefined, undefined, undefined),
                ], typescript_1.default.NodeFlags.Const), typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Object.entries"), undefined, [
                    typescript_1.default.factory.createAsExpression(expr, TypeFactory_1.TypeFactory.keyword("any")),
                ]), typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createStrictEquality(typescript_1.default.factory.createIdentifier("undefined"), typescript_1.default.factory.createIdentifier("value")), typescript_1.default.factory.createContinueStatement(), typescript_1.default.factory.createIfStatement(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("Array.isArray"), undefined, [typescript_1.default.factory.createIdentifier("value")]), typescript_1.default.factory.createExpressionStatement(typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createPropertyAccessExpression(typescript_1.default.factory.createIdentifier("value"), typescript_1.default.factory.createIdentifier("forEach")), undefined, [
                    typescript_1.default.factory.createArrowFunction(undefined, undefined, [IdentifierFactory_1.IdentifierFactory.parameter("elem")], undefined, undefined, typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.access(typescript_1.default.factory.createIdentifier(variables))("append"), undefined, [
                        typescript_1.default.factory.createIdentifier("key"),
                        typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("String"), undefined, [typescript_1.default.factory.createIdentifier("elem")]),
                    ])),
                ])), typescript_1.default.factory.createExpressionStatement(typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.access(typescript_1.default.factory.createIdentifier(variables))("set"), undefined, [
                    typescript_1.default.factory.createIdentifier("key"),
                    typescript_1.default.factory.createCallExpression(typescript_1.default.factory.createIdentifier("String"), undefined, [typescript_1.default.factory.createIdentifier("value")]),
                ]))))),
                local("location")("string")(template()),
                typescript_1.default.factory.createReturnStatement(typescript_1.default.factory.createConditionalExpression(typescript_1.default.factory.createStrictEquality(ExpressionFactory_1.ExpressionFactory.number(0), IdentifierFactory_1.IdentifierFactory.access(typescript_1.default.factory.createIdentifier(variables))("size")), undefined, typescript_1.default.factory.createIdentifier("location"), undefined, typescript_1.default.factory.createTemplateExpression(typescript_1.default.factory.createTemplateHead(""), [
                    typescript_1.default.factory.createTemplateSpan(typescript_1.default.factory.createIdentifier("location"), typescript_1.default.factory.createTemplateMiddle("?")),
                    typescript_1.default.factory.createTemplateSpan(typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.access(typescript_1.default.factory.createIdentifier(variables))("toString"), undefined, undefined), typescript_1.default.factory.createTemplateTail("")),
                ]))),
            ], true);
        };
        if (props.query !== undefined && g.query.length === 0)
            return out(block(typescript_1.default.factory.createIdentifier(props.query.name)));
        return out(block(typescript_1.default.factory.createObjectLiteralExpression([
            ...(props.query
                ? [
                    typescript_1.default.factory.createSpreadAssignment(typescript_1.default.factory.createIdentifier(props.query.name)),
                ]
                : []),
            ...g.query.map((q) => q.name === q.field
                ? typescript_1.default.factory.createShorthandPropertyAssignment(q.name)
                : typescript_1.default.factory.createPropertyAssignment(Escaper_1.Escaper.variable(q.field)
                    ? q.field
                    : typescript_1.default.factory.createStringLiteral(q.field), typescript_1.default.factory.createIdentifier(q.name))),
        ], true)));
    };
    const write_stringify = (config) => (importer) => constant("stringify")(typescript_1.default.factory.createArrowFunction([], undefined, [
        IdentifierFactory_1.IdentifierFactory.parameter("input", typescript_1.default.factory.createTypeReferenceNode("Input")),
    ], undefined, undefined, typescript_1.default.factory.createCallExpression(IdentifierFactory_1.IdentifierFactory.access(IdentifierFactory_1.IdentifierFactory.access(typescript_1.default.factory.createIdentifier(SdkImportWizard_1.SdkImportWizard.typia(importer)))("json"))(config.assert ? "stringify" : "assertStringify"), undefined, [typescript_1.default.factory.createIdentifier("input")])));
})(SdkNamespaceProgrammer || (exports.SdkNamespaceProgrammer = SdkNamespaceProgrammer = {}));
const local = (name) => (type) => (expression) => typescript_1.default.factory.createVariableStatement([], typescript_1.default.factory.createVariableDeclarationList([
    typescript_1.default.factory.createVariableDeclaration(name, undefined, typescript_1.default.factory.createTypeReferenceNode(type), expression),
], typescript_1.default.NodeFlags.Const));
const constant = (name) => (expression) => typescript_1.default.factory.createVariableStatement([typescript_1.default.factory.createModifier(typescript_1.default.SyntaxKind.ExportKeyword)], typescript_1.default.factory.createVariableDeclarationList([
    typescript_1.default.factory.createVariableDeclaration(name, undefined, undefined, expression),
], typescript_1.default.NodeFlags.Const));
const getType = (config) => (importer) => (p) => p.metadata
    ? SdkTypeProgrammer_1.SdkTypeProgrammer.write(config)(importer)(p.metadata)
    : typescript_1.default.factory.createTypeReferenceNode(p.typeName);
//# sourceMappingURL=SdkNamespaceProgrammer.js.map