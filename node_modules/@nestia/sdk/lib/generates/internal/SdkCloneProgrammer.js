"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkInterfaceProgrammer = void 0;
const typescript_1 = __importDefault(require("typescript"));
const MetadataCollection_1 = require("typia/lib/factories/MetadataCollection");
const MetadataFactory_1 = require("typia/lib/factories/MetadataFactory");
const MapUtil_1 = require("../../utils/MapUtil");
const FilePrinter_1 = require("./FilePrinter");
const SdkTypeProgrammer_1 = require("./SdkTypeProgrammer");
var SdkInterfaceProgrammer;
(function (SdkInterfaceProgrammer) {
    SdkInterfaceProgrammer.write = (checker) => (config) => (routes) => {
        const collection = new MetadataCollection_1.MetadataCollection({
            replace: MetadataCollection_1.MetadataCollection.replace,
        });
        for (const r of routes) {
            for (const p of r.parameters) {
                const res = MetadataFactory_1.MetadataFactory.analyze(checker)({
                    escape: false,
                    constant: true,
                    absorb: false,
                })(collection)(p.type);
                if (res.success)
                    p.metadata = res.data;
            }
            for (const e of Object.values(r.exceptions)) {
                const res = MetadataFactory_1.MetadataFactory.analyze(checker)({
                    escape: true,
                    constant: true,
                    absorb: false,
                })(collection)(e.type);
                if (res.success)
                    e.metadata = res.data;
            }
            const res = MetadataFactory_1.MetadataFactory.analyze(checker)({
                escape: true,
                constant: true,
                absorb: false,
            })(collection)(r.output.type);
            if (res.success)
                r.output.metadata = res.data;
        }
        const dict = new Map();
        for (const alias of collection.aliases())
            prepare(dict)(alias.name)((importer) => write_alias(config)(importer)(alias));
        for (const object of collection.objects())
            if (object.name !== "__type" &&
                !object.name.startsWith("__type.") &&
                object.name !== "__object" &&
                !object.name.startsWith("__object."))
                prepare(dict)(object.name)((importer) => write_object(config)(importer)(object));
        return dict;
    };
    const prepare = (dict) => (name) => (programmer) => {
        const accessors = name.split(".");
        const modulo = { value: null };
        accessors.forEach((acc, i) => {
            modulo.value = MapUtil_1.MapUtil.take(dict, acc, () => ({
                name: acc,
                children: new Map(),
                programmer: null,
            }));
            if (i === accessors.length - 1)
                modulo.value.programmer = programmer;
            dict = modulo.value.children;
        });
        return modulo;
    };
    const write_alias = (config) => (importer) => (alias) => FilePrinter_1.FilePrinter.description(typescript_1.default.factory.createTypeAliasDeclaration([typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], alias.name.split(".").at(-1), [], SdkTypeProgrammer_1.SdkTypeProgrammer.write(config)(importer)(alias.value)), writeComment([])(alias.description, alias.jsDocTags));
    const write_object = (config) => (importer) => (object) => {
        var _a;
        return FilePrinter_1.FilePrinter.description(typescript_1.default.factory.createTypeAliasDeclaration([typescript_1.default.factory.createToken(typescript_1.default.SyntaxKind.ExportKeyword)], object.name.split(".").at(-1), [], SdkTypeProgrammer_1.SdkTypeProgrammer.write_object(config)(importer)(object)), writeComment([])((_a = object.description) !== null && _a !== void 0 ? _a : null, object.jsDocTags));
    };
})(SdkInterfaceProgrammer || (exports.SdkInterfaceProgrammer = SdkInterfaceProgrammer = {}));
const writeComment = (atomics) => (description, jsDocTags) => {
    const lines = [];
    if (description === null || description === void 0 ? void 0 : description.length)
        lines.push(...description.split("\n").map((s) => `${s}`));
    const filtered = !!atomics.length && !!(jsDocTags === null || jsDocTags === void 0 ? void 0 : jsDocTags.length)
        ? jsDocTags.filter((tag) => !atomics.some((a) => a.tags.some((r) => r.some((t) => t.kind === tag.name))))
        : jsDocTags !== null && jsDocTags !== void 0 ? jsDocTags : [];
    if ((description === null || description === void 0 ? void 0 : description.length) && filtered.length)
        lines.push("");
    if (filtered.length)
        lines.push(...filtered.map((t) => {
            var _a;
            return ((_a = t.text) === null || _a === void 0 ? void 0 : _a.length)
                ? `@${t.name} ${t.text.map((e) => e.text).join("")}`
                : `@${t.name}`;
        }));
    return lines.join("\n");
};
//# sourceMappingURL=SdkCloneProgrammer.js.map