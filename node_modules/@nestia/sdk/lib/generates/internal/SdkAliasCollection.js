"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SdkAliasCollection = void 0;
const typescript_1 = __importDefault(require("typescript"));
const typia_1 = __importDefault(require("typia"));
const SdkTypeProgrammer_1 = require("./SdkTypeProgrammer");
var SdkAliasCollection;
(function (SdkAliasCollection) {
    SdkAliasCollection.name = (config) => (importer) => (p) => p.metadata
        ? SdkTypeProgrammer_1.SdkTypeProgrammer.write(config)(importer)(p.metadata)
        : typescript_1.default.factory.createTypeReferenceNode(p.typeName);
    SdkAliasCollection.headers = (config) => (importer) => (param) => {
        const type = SdkAliasCollection.name(config)(importer)(param);
        if (config.primitive === false)
            return type;
        return typescript_1.default.factory.createTypeReferenceNode(importer.external({
            type: true,
            library: "@nestia/fetcher",
            instance: "Resolved",
        }), [type]);
    };
    SdkAliasCollection.query = (config) => (importer) => (param) => {
        const type = SdkAliasCollection.name(config)(importer)(param);
        if (config.primitive === false)
            return type;
        return typescript_1.default.factory.createTypeReferenceNode(importer.external({
            type: true,
            library: "@nestia/fetcher",
            instance: "Resolved",
        }), [type]);
    };
    SdkAliasCollection.input = (config) => (importer) => (param) => {
        const type = SdkAliasCollection.name(config)(importer)(param);
        if (config.clone === true || config.primitive === false)
            return type;
        return typescript_1.default.factory.createTypeReferenceNode(importer.external({
            type: true,
            library: "@nestia/fetcher",
            instance: (input => {
                const $io0 = input => true === input.custom && "body" === input.category && "number" === typeof input.index && "string" === typeof input.name && (undefined === input.field || "string" === typeof input.field) && "boolean" === typeof input.encrypted && ("application/json" === input.contentType || "text/plain" === input.contentType || "application/x-www-form-urlencoded" === input.contentType || "multipart/form-data" === input.contentType);
                return "object" === typeof input && null !== input && $io0(input);
            })(param) &&
                param.contentType === "multipart/form-data"
                ? "Resolved"
                : "Primitive",
        }), [type]);
    };
    SdkAliasCollection.output = (checker) => (config) => (importer) => (route) => {
        var _a;
        if (config.propagate !== true) {
            const node = SdkAliasCollection.name(config)(importer)(route.output);
            const type = checker.getTypeAtLocation(node);
            const filter = (flag) => (type.getFlags() & flag) !== 0;
            if (config.clone === true ||
                config.primitive === false ||
                filter(typescript_1.default.TypeFlags.Undefined) ||
                filter(typescript_1.default.TypeFlags.Never) ||
                filter(typescript_1.default.TypeFlags.Void) ||
                filter(typescript_1.default.TypeFlags.VoidLike))
                return node;
            return typescript_1.default.factory.createTypeReferenceNode(importer.external({
                type: true,
                library: "@nestia/fetcher",
                instance: route.output.contentType === "application/x-www-form-urlencoded"
                    ? "Resolved"
                    : "Primitive",
            }), [node]);
        }
        const branches = [
            {
                status: String((_a = route.status) !== null && _a !== void 0 ? _a : (route.method === "POST" ? 201 : 200)),
                type: SdkAliasCollection.name(config)(importer)(route.output),
            },
            ...Object.entries(route.exceptions).map(([status, value]) => ({
                status,
                type: SdkAliasCollection.name(config)(importer)(value),
            })),
        ];
        return typescript_1.default.factory.createTypeReferenceNode(importer.external({
            type: true,
            library: "@nestia/fetcher",
            instance: "IPropagation",
        }), [
            typescript_1.default.factory.createTypeLiteralNode(branches.map((b) => typescript_1.default.factory.createPropertySignature(undefined, typescript_1.default.factory.createNumericLiteral(b.status), undefined, b.type))),
            ...(route.status
                ? [
                    typescript_1.default.factory.createLiteralTypeNode(typescript_1.default.factory.createNumericLiteral(route.status)),
                ]
                : []),
        ]);
    };
    SdkAliasCollection.responseBody = (checker) => (config) => (importer) => (route) => SdkAliasCollection.output(checker)(Object.assign(Object.assign({}, config), { propagate: false }))(importer)(route);
})(SdkAliasCollection || (exports.SdkAliasCollection = SdkAliasCollection = {}));
//# sourceMappingURL=SdkAliasCollection.js.map